# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import pathlib
import matplotlib.pyplot as plt

pathlib.Path.cwd()
train_path = pathlib.Path('/kaggle/input/fruit-recognition/train/train')
test_path = pathlib.Path('/kaggle/input/fruit-recognition/test')
print(str(train_path))
print(str(test_path))

image_paths = []
file_names = []
test_file_names = []
labels = []
true_labels = []
nlabels = 0

for fruit in train_path.iterdir():
    dir_path = str(fruit)
    label  = fruit.name
    print(label)
    true_labels.append(label)
    nlabels += 1
    for image in fruit.iterdir():
        image_paths.append(dir_path)
        file_name = image.name
        file_names.append(file_name)
        labels.append(label)

for fruit in test_path.iterdir():
    for image in fruit.iterdir():
        test_file_names.append(fruit.name)

true_labels.sort()
print(len(labels))
print(true_labels)
print(nlabels)
print(len(test_file_names))

import torch
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from torch import nn

train_data = datasets.ImageFolder(train_path, transform=transforms.ToTensor())
test_data = datasets.ImageFolder(test_path, transform=transforms.ToTensor())

print(len(train_data))
print(len(test_data))

train_set, dev_set = torch.utils.data.random_split(train_data, [0.8, 0.2])
train_data_loader = DataLoader(train_set, batch_size=64, shuffle=True)
dev_data_loader = DataLoader(dev_set, batch_size=64)

test_data_loader = DataLoader(test_data, batch_size=64)
print(len(train_data_loader))
print(len(test_data_loader))

images, labels = next(iter(train_data_loader))
print(images.size())
print(labels.size())
print(labels)

class ImageClassifier(nn.Module):
    def __init__(self):
        super(ImageClassifier, self).__init__()
        self.flatten = nn.Flatten()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(100*100*3, 50),
            nn.ReLU(),
            nn.Linear(50, 50), 
            nn.ReLU(),
            nn.Linear(50, 33))
    
    def forward(self, X):
        X = self.flatten(X)
        logits = self.linear_relu_stack(X)
        return(logits)

# Define model    
model = ImageClassifier()

# Define loss and optimization function
loss_fn = nn.CrossEntropyLoss()
#optimizer = torch.optim.SGD(model.parameters(), lr = 0.001, momentum=0.9, weight_decay = 0.01)
optimizer = torch.optim.Adam(model.parameters(), lr = 0.0001)

def train_one_epoch(train_data_loader, model, loss, optimizer):
    
    #num_batches = len(train_data_loader)
    #data_iter = iter(train_data_loader)
    #for i in range(num_batches):
    #    images, labels = next(data_iter)
    total_loss = 0
    correct = 0
    for images, labels in train_data_loader:
        optimizer.zero_grad()
        y_hat = model(images)
        loss = loss_fn(y_hat, labels)
        total_loss += loss.item()    # loss is a tensor
        loss.backward()
        optimizer.step()
        correct_labels = (torch.argmax(y_hat, dim = 1) == labels)
        correct += correct_labels.sum().item()
        
    set_size = len(train_data_loader.dataset)
    print(correct)
    print(set_size)
    print(float(correct)/set_size)
    return(total_loss/set_size)

def dev_test_loop(data_loader, model, loss):
    pred_labels = []
    total_loss = 0
    correct = 0
    fig, axes = plt.subplots(20, 6, figsize=(12, 30))
    for ax in axes.flat:
        ax.set_axis_off()
    i = 0
    with torch.no_grad():
        for images, labels in data_loader:
            y_pred = model(images)
            loss = loss_fn(y_pred, labels)
            total_loss += loss.item()    # loss is a tensor
            #y_pred_label = torch.argmax(y_pred, dim = 1)
            correct_labels = (torch.argmax(y_pred, dim = 1) == labels)
            correct += correct_labels.sum().item()
            y_labels = torch.argmax(y_pred, dim = 1)
            ax = axes.flat[i]
            ax.imshow(images[0].permute(1,2,0))
            ax.set_title(true_labels[int(y_labels[0])])
            i = i+1
            #pred_labels.append(y_pred_label)    
    #return(pred_labels)
    set_size = len(data_loader.dataset)
    print(correct)
    print(set_size)
    print(float(correct)/set_size)
    return(total_loss/set_size)

def test_loop(test_data_loader, model):
    fig, axes = plt.subplots(20, 6, figsize=(12, 30))
    for ax in axes.flat:
        ax.set_axis_off()
    i = 0
    with torch.no_grad():
        for images, labels in test_data_loader:
            y_pred = model(images)
            y_labels = torch.argmax(y_pred, dim = 1)
            ax = axes.flat[i]
            ax.imshow(images[0].permute(1,2,0))
            ax.set_title(true_labels[int(y_labels[0])])
            i = i+1

# Training model using training set
epochs = 8
for t in range(epochs):
    print(t)
    loss = train_one_epoch(train_data_loader, model, loss_fn, optimizer)
    print(loss)

# Look at loss on train-dev set
dev_loss = dev_test_loop(dev_data_loader, model, loss)
print(dev_loss)

pred_labels = test_loop(test_data_loader, model)
print(pred_labels.sha)

i=0
for fruit in test_path.iterdir():
    for image in fruit.iterdir():
        img_path = str(test_path) + '/test' + image.name
        print(img_path)
        image_path = pathlib.Path(img_path)
        img = plt.imread(image_path)
        imshow(img)
        print(labels[pred_labels[i]])
        i += 1
